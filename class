1)define a class currentaccount(accno,name,balance,minbalance) define appropriate constructors and operations withdraw(),deposte(),viewbalance()
create an object and performance operations
class  CurrentAccount(accno: Int ,nm: String, bal:Int, minBal:Int)
{  
      	var accNo:Int= accno; 
      	var name:String=nm
      	var balance:Int=bal;
      	var minBalance:Int=minBal;
   	def withdraw(amount:Int)
        {
         	if((balance-amount)<minBalance)
          		println("Insufficient balance to withdraw ")
         	else
          		balance-=amount
          		println("Current Balance = "+balance);
        }
    	def deposit(amount:Int)
        {
        	 balance+=amount
           	println("Current Balance = "+balance);
        }
    	def viewBalance()
        {
           	println("Current Available Balance = "+balance);
        }
}
 
object mainObject
{
    	def main(args:Array[String])
    	{    
      		var b=new CurrentAccount(1,"Ram",5000,500)
      		var choice:Int=0
          	println("WELCOME.....")
      		do
          	{
           		println("1: WITHDRAW\n2:DEPOSIT\n3:VIEW BALANCE\n4:EXIT")
           		println("Enter your choice : ");
           		choice=scala.io.StdIn.readInt
        		var amount:Int=0
           		choice match
           		{
        			case 1 => print("Enter the amount to withdraw : ")
          			amount=scala.io.StdIn.readInt()
          			b.withdraw(amount)
        			case 2 => print("Enter the amount to deposit : ")
          			amount=scala.io.StdIn.readInt()
          			b.deposit(amount)
        			case 3 => b.viewBalance()
        			case 4 => println("Exiting...")
        			case _ => println("Invalid choice entered, Try again...")
          		}
        	}while(choice!=4)
         }
}

2)Define a class Employee (id, name, salary). Define methods accept() and display().
Display details of employee having maximum salary
class Employee(id:Int, name:String, salary:Double)
{
  def accept()
  {
    println("Employee ID: "+id)
    println("Employee Name: "+name)
    println("Employee Salary: "+salary)
  }
  def display()
  {
    println("Employee ID: "+id)
    println("Employee Name: "+name)
    println("Employee Salary: "+salary)
  }
}

object Employee
{
  def getMaxSalaryEmployee(employees:Array[Employee]):Employee=
  {
    var maxSalaryEmployee = employees(0)
    for(employee <- employees)
    {
      maxSalaryEmployee = employee
    }
    return maxSalaryEmployee
  }
  def main(args: Array[String]) {
    val emp1 = new Employee(1, "John", 10000)
    val emp2 = new Employee(2, "Smith", 15000)
    val emp3 = new Employee(3, "Peter", 20000)
    val employees = Array(emp1, emp2, emp3)
    val maxSalaryEmployee = getMaxSalaryEmployee(employees)
    println("\nEmployee having maximum salary:")
    maxSalaryEmployee.display()
  }
}

3)Create abstract class Order (id, description). Derive two classes PurchaseOrder&amp; SalesOrder with members Vendor and Customer.
Create object of each PurchaseOrder and SalesOrder. Display the details of each account. in scala
abstract class Order(id: Int, description: String)
class PurchaseOrder(id: Int, description: String, vendor: String) extends Order(id, description)
{
  def displayDetails():Unit =
  {
    println("Id: " + id)
    println("Description: " + description)
    println("Vendor: " + vendor)
  }
}

class SalesOrder(id: Int, description: String, customer: String) extends Order(id, description)
{
  def displayDetails():Unit = 
  {
    println("Id: " + id)
    println("Description: " + description)
    println("Customer: " + customer)
  }
}

object Main {
  def main(args: Array[String]):Unit =
  {
    val purchaseOrder = new PurchaseOrder(1, "Computer", "Dell")
    val salesOrder = new SalesOrder(2, "Laptop", "John")
    println("Purchase Order Details: ")
    purchaseOrder.displayDetails()
    println("Sales Order Details: ")
    salesOrder.displayDetails()
  }
}
