Q4 Define a class Employee (id, name, salary). 
Define methods accept() and display().Display details of employee having maximum salary

class Employee(id:Int, name:String, salary:Double)
{
  def accept()
  {
    println("Employee ID: "+id)
    println("Employee Name: "+name)
    println("Employee Salary: "+salary)
  }
  def display()
  {
    println("Employee ID: "+id)
    println("Employee Name: "+name)
    println("Employee Salary: "+salary)
  }
}

object Employee
{
  def getMaxSalaryEmployee(employees:Array[Employee]):Employee=
  {
    var maxSalaryEmployee = employees(0)
    for(employee <- employees)
    {
        maxSalaryEmployee = employee
      }
    
    return maxSalaryEmployee
  }
  def main(args: Array[String]) {
    val emp1 = new Employee(1, "John", 10000)
    val emp2 = new Employee(2, "Smith", 15000)
    val emp3 = new Employee(3, "Peter", 20000)
    
    val employees = Array(emp1, emp2, emp3)
    val maxSalaryEmployee = getMaxSalaryEmployee(employees)
    println("\nEmployee having maximum salary:")
    maxSalaryEmployee.display()
  }
}


Q5 Create class Project (id, name, location). Define parameterized constructor.
Keep a count of each object created and display the details of each project. in scala

class Project(id:Int, name:String, location:String){
  private var count = 0
  count += 1
  def displayDetails(){
    println("Project id: "+id)
    println("Project Name: "+name)
    println("Project Location: "+location)
    println("Total Projects created: "+count)
  }
}

object MainObject{
  def main(args:Array[String]){
  
    var p1 = new Project(1, "Project1", "Delhi")
    p1.displayDetails()
    
    var p2 = new Project(2, "Project2", "Mumbai")
    p2.displayDetails()
  }
}


Q6 Define a class Sports (id, name, description, amount). Derive two classes Indoor and Outdoor. 
Define appropriate constructors and operations. Create an object and perform operations. in scala

class Sports(id: Int, name: String, description: String, amount: Double)
{
  def getId(): Int = this.id
  def getName(): String = this.name
  def getDescription(): String = this.description
  def getAmount(): Double = this.amount
}

class Indoor(id: Int, name: String, description: String, amount: Double) extends Sports(id, name, description, amount) 
{
  def play(): Unit = println(" ")
}
`
class Outdoor(id: Int, name: String, description: String, amount: Double) extends Sports(id, name, description, amount)
{
  def play(): Unit = println(" ")
}

object Main {
  def main(args: Array[String]): Unit = {
    val indoor = new Indoor(1,"Badminton", "Racquet sport", 50.0)
    val outdoor = new Outdoor(2, "Cricket", "Bat and Ball", 100.0)
    println("Name of indoor game: " + indoor.getName())
    println("Name of outdoor game: " + outdoor.getName())

  }
}


Q7 Design abstract class Employee with computeSal() as abstract function. Create two subclasses Worker and Manager.
Salary of worker should be calculated on hourly basis of work and Salary of Manager should be calculated 
on monthly basis with additionalincentives.

abstract class Employee()
{
	def ComputeSal();
}

class Worker(a:Int) extends Employee()
{
	var S:Int=a;
	var ans:Int=300;
        def ComputeSal()
        {
               print("Salary of Worker WeekWise:"+((S*ans)*7)+"\n");
		
       	}

}

class Manager(b:Int) extends Employee()
{
        var R:Int=b;
        var ans:Double=10000;

	def ComputeSal()
	{
		print("Salary of Manager MonthWise:"+(ans+(R*300))+"\n");
	}
}
object EmpSal
{
	def main(a:Array[String])
	{
               val ob1=new Worker(4);
               val ob2=new Manager(12);
                while(true)
                {
                        println("MENU"+"\n"+"1:Worker"+"\n"+"2:Manager"+"\n"+"3:Exit")
                        println("Enter the Choise:");
                        var n1:Int=scala.io.StdIn.readInt();

                        n1 match{
                                case 1=>ob1.ComputeSal();

                                case 2=>ob2.ComputeSal();

                                case 3=>System.exit(0);



                        }
                }
	
	}	
}

Q7)design abstract class employee with computesal() as abstract function.create two subclasses worker and manager.
salary of worker should be calculated on hourly basis of work and salary of manager should be
calculated on monthly basis with additional incentives

abstract class Employees {
  def computeSal(): Double
}

class Worker extends Employees {
  private var hoursWorked: Double = 0.0
  private var hourlyWage: Double = 0.0

  def setHoursWorked(hours: Double): Unit = {
    hoursWorked = hours
  }

  def setHourlyWage(wage: Double): Unit = {
    hourlyWage = wage
  }

  override def computeSal(): Double = {
    hoursWorked * hourlyWage
  }

}

class Manager extends Employees {

  private var monthlySalary: Double = 0.0
  private var incentives: Double = 0.0

  def setMonthlySalary(salary: Double): Unit = {
    monthlySalary = salary
  }

  def setIncentives(inc: Double): Unit = {
    incentives = inc
  }

  override def computeSal(): Double = {
    monthlySalary + incentives
  }

}
object prog7 {
  def main(args: Array[String]): Unit = {

    val worker = new Worker
    worker.setHoursWorked(40)
    worker.setHourlyWage(15)
    val workerSalary = worker.computeSal()
    println("Worker Salary : " + workerSalary)
    val manager = new Manager
    manager.setMonthlySalary(5000)
    manager.setIncentives(1000)
    val managerSalary = manager.computeSal()
    println("Manager Salary : " + managerSalary)
  }
}
